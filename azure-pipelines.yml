parameters:
  - name: APIM_INSTANCE_NAME
    displayName: APIM instance name
    type: string
    default: MIARG3-APIM-DEVNFNTY001
  - name: RESOURCE_GROUP_NAME
    displayName: APIM instance resource group name
    type: string
    default: MIARG3-RG-DEVNFNTY001
  - name: APIM_REPOSITORY_NAME
    displayName: APIM repository for pull request
    type: string
    default: API_Management
  - name: API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH
    displayName: Folder where you want to extract the artifacts
    type: string
    default: artifacts
  - name: TARGET_BRANCH_NAME
    displayName: Target branch for pull request
    type: string
    default: main
  - name: CONFIGURATION_YAML_PATH
    displayName: Optional configuration file
    type: string
    values:
      - Extract All
      - configuration.extractor.yaml
  - name: API_SPECIFICATION_FORMAT
    displayName: API Specification Format
    type: string
    values:
      - OpenAPIV3Yaml
      - OpenAPIV3Json
      - OpenAPIV2Yaml
      - OpenAPIV2Json
trigger: none
variables:
  - group: apim-automation
  - name: System.Debug
    value: true
stages:
  - stage: create_artifact_from_portal
    displayName: Create artifact from portal
    jobs:
      - job: create_artifact_from_portal
        displayName: Create artifact from portal
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: AzureCLI@2
            displayName: Set extraction variables
            inputs:
              azureSubscription: "$(SERVICE_CONNECTION_NAME)"
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                Set-StrictMode -Version Latest
                $ErrorActionPreference = "Stop"
                $VerbosePreference = "Continue"
                $InformationPreference = "Continue"
                Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_BEARER_TOKEN]$(az account get-access-token --query "accessToken" --output tsv)"
                Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_CLIENT_ID]$env:servicePrincipalId"
                Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_CLIENT_SECRET]$env:servicePrincipalKey"
                Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_TENANT_ID]$env:tenantId"
                
                if (-not $env:AZURE_SUBSCRIPTION_ID) {
                    $subscriptionCount = az account list --query "length([])" --output tsv
                    if ($subscriptionCount -eq 1) {
                        $subscriptionId = az account list --query "[0].id" --output tsv
                        Write-Host "Setting AZURE_SUBSCRIPTION_ID environment variable to: $subscriptionId"
                        Write-Host "##vso[task.setvariable issecret=true;variable=AZURE_SUBSCRIPTION_ID]$($subscriptionId)"
                    } 
                    elseif ($subscriptionCount -gt 1) {
                        Write-Host "Multiple subscriptions are accessible. Please set the AZURE_SUBSCRIPTION_ID environment variable manually."
                        exit 1
                    }
                }
                else {
                  Write-Host "AZURE_SUBSCRIPTION_ID is already set to: $env:AZURE_SUBSCRIPTION_ID"
                }
              addSpnToEnvironment: true
              failOnStandardError: true
          - task: PowerShell@2
            displayName: Fetch extractor
            inputs:
              targetType: "inline"
              script: |
                Set-StrictMode -Version Latest
                $ErrorActionPreference = "Stop"
                $VerbosePreference = "Continue"
                $InformationPreference = "Continue"
                Write-Information "Setting name variables..."
                $releaseFileName = "extractor-linux-x64.zip"
                $executableFileName = "extractor"
                if ("$(Agent.OS)" -like "*win*") {
                  $releaseFileName = "extractor-win-x64.zip"
                  $executableFileName = "extractor.exe"
                }
                elseif ("$(Agent.OS)" -like "*mac*" -and "$(Agent.OSArchitecture)" -like "*arm*") {
                  $releaseFileName = "extractor-osx-arm64.zip"
                }
                elseif ("$(Agent.OS)" -like "*mac*" -and "$(Agent.OSArchitecture)" -like "*x86_64*") {
                  $releaseFileName = "extractor-osx-x64.zip"
                }
                Write-Information "Downloading release..."
                $uri = "https://github.com/Azure/apiops/releases/download/$(apiops_release_version)/$releaseFileName"
                $downloadFilePath = Join-Path "$(Agent.TempDirectory)" $releaseFileName
                Invoke-WebRequest -Uri "$uri" -OutFile "$downloadFilePath"
                Write-Information "Extracting release..."
                $executableFolderPath = Join-Path "$(Agent.TempDirectory)" "extractor"
                Expand-Archive -Path "$downloadFilePath" -DestinationPath "$executableFolderPath"
                $executableFilePath = Join-Path "$executableFolderPath" $executableFileName
                Write-Information "Setting file permissions..."
                if ("$(Agent.OS)" -like "*linux*")
                {
                  & chmod +x "$executableFilePath"
                  if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
                }
                Write-Host "##vso[task.setvariable variable=EXTRACTOR_FILE_PATH]$executableFilePath"
                Write-Information "Execution complete."
              failOnStderr: true
              pwsh: true
          - task: PowerShell@2
            displayName: Run extractor
            inputs:
              targetType: "inline"
              script: |
                Set-StrictMode -Version Latest
                $ErrorActionPreference = "Stop"
                $VerbosePreference = "Continue"
                $InformationPreference = "Continue"
                & "$(EXTRACTOR_FILE_PATH)"                
                if ($LASTEXITCODE -ne 0) { throw "Running extractor failed."}
                Write-Information "Execution complete."
              failOnStderr: true
              pwsh: true
            env:
              AZURE_BEARER_TOKEN: $(AZURE_BEARER_TOKEN)
              AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
              AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              AZURE_TENANT_ID: $(AZURE_TENANT_ID)
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZURE_RESOURCE_GROUP_NAME: ${{ parameters.RESOURCE_GROUP_NAME }}
              API_MANAGEMENT_SERVICE_NAME: ${{ parameters.APIM_INSTANCE_NAME }}
              API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: $(Build.ArtifactStagingDirectory)/${{ parameters.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}
              API_SPECIFICATION_FORMAT: ${{ parameters.API_SPECIFICATION_FORMAT }}
              ${{ if ne(parameters.CONFIGURATION_YAML_PATH, 'Extract All') }}:
                CONFIGURATION_YAML_PATH: ${{ parameters.CONFIGURATION_YAML_PATH }}
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'
          - script: |
              npm install -g @stoplight/spectral-cli
            displayName: 'Install Spectral'
          - script: |
              spectral lint --format stylish --format junit --output.junit $(Build.ArtifactStagingDirectory)/spectral-result.xml $(Build.ArtifactStagingDirectory)/${{ parameters.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}/apis/**/specification.{json,yaml,yml} -r https://raw.githubusercontent.com/connectedcircuits/devops-api-linter/main/rules.yaml
            displayName: 'Run Spectral Linting'
            continueOnError: true
            failOnStderr: true
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/spectral-result.xml'
              searchFolder: $(Build.ArtifactStagingDirectory)
              testRunTitle: 'Linting results for API $(Build.SourceBranchName)'
              failTaskOnFailedTests: false
          - task: PublishPipelineArtifact@1
            displayName: Publish pipeline artifact
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)"
              artifactType: pipeline
              artifactName: artifacts-from-portal
          - task: Bash@3
            displayName: 'Pipeline Summary Tab Upload'
            inputs:
              targetType: 'inline'
              script: |
                outputFilePath="$(Build.ArtifactStagingDirectory)/run-extractor.md"
                apiDirectoryPath="$(Build.ArtifactStagingDirectory)/artifacts"
                cd "$apiDirectoryPath" # exclude top directory
                
                echo "# Azure APIM Modifications Summary" > "$outputFilePath"
                echo "" >> "$outputFilePath" #newline                
                echo '```' >> "$outputFilePath"
                tree -d --noreport -I "outputFilePath" | sed 's/^/    /' >> "$outputFilePath"
                echo '```' >> "$outputFilePath"                
                echo "" >> "$outputFilePath" #newline                
                cat "$outputFilePath"
              failOnStderr: true
              pwsh: false
  - stage: create_pull_request
    displayName: Create pull request
    dependsOn: create_artifact_from_portal
    jobs:
      - job: create_pull_request
        displayName: Create pull request
        pool:
          vmImage: ubuntu-latest
        steps:
          - script: |
              gh --version
            displayName: Check GitHub CLI version
          - task: Bash@3
            displayName: 'Install GitHub CLI'
            inputs:
              targetType: 'inline'
              script: |
                echo "Installing GitHub CLI..."
                ghVersion=$(gh --version)
                echo "Current GitHub CLI version: $ghVersion"
                if ! command -v gh &> /dev/null; then
                  curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
                  echo "deb [arch=amd64 signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
                  sudo apt update
                  sudo apt install gh
                else
                  echo "GitHub CLI is already installed."
                fi
                gh --version
              failOnStderr: true
              pwsh: false
          - task: PowerShell@2
            displayName: 'Create Pull Request'
            inputs:
              targetType: 'inline'
              script: |
                Set-StrictMode -Version Latest
                $ErrorActionPreference = "Stop"
                $VerbosePreference = "Continue"
                $InformationPreference = "Continue"
                Write-Information "Creating pull request..."
                gh auth login --with-token $(System.AccessToken)
                gh pr create --repo "ValentinGarciaIriart/${{ parameters.APIM_REPOSITORY_NAME }}" --head "$(Build.SourceBranchName)" --base "${{ parameters.TARGET_BRANCH_NAME }}" --title "Merging artifacts from portal (Build $(Build.BuildId))" --body "Automated pull request to sync artifacts from portal."
                Write-Information "Execution complete."
              failOnStderr: true
              pwsh: true
            env:
              GITHUB_TOKEN: $(System.AccessToken)
